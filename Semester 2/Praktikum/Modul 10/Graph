/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modul10;

import java.util.Stack;

/**
 *
 * @author asus
 */
class Vertex {

    public char label;
    public boolean wasVisited;

    public Vertex(char label) {
        this.label = label;
        wasVisited = false;
    }
}

class Graph {

    private final int MAX_VERTS = 20;
    private Vertex vertexList[];
    private int adjMat[][];
    private int nVerts;
    private char sortedArray[];

    public Graph() {
        vertexList = new Vertex[MAX_VERTS];
        sortedArray = new char[MAX_VERTS];
        adjMat = new int[MAX_VERTS][MAX_VERTS];
        nVerts = 0;
        for (int i = 0; i < MAX_VERTS; i++) {
            for (int j = 0; j < MAX_VERTS; j++) {
                adjMat[i][j] = 0;
            }
        }
    }

    public void addVertex(char label) {
        vertexList[nVerts++]
                = new Vertex(label);
    }

    public void addEdge(int start, int end) {
//        adjMat[start][end] = 1;
        adjMat[end][start] = 1;
    }

    public void display() {
        System.out.println("Adjecency:");
        for (int row = 0; row < nVerts; row++) {
            for (int col = 0; col < nVerts;
                    col++) {
                if (adjMat[row][col] == 1) {
                    System.out.println(
                            vertexList[row].label
                            + " --> "
                            + vertexList[col].label);
                }
            }
        }
        System.out.println("");
    }

    public void connectTable() {
        System.out.println("Connectivity Table: ");
        for (int row = 0; row < nVerts; row++) {
            System.out.print(vertexList[row].label + " ");
            for (int col = 0; col < nVerts; col++) {
                if (adjMat[row][col] == 1) {
                    System.out.print(vertexList[col].label + " ");
                    //opsi 1
                    for (int i = 0; i < nVerts; i++) {
                        if (adjMat[col][i] == 1 && vertexList[i].wasVisited == false) {
                            System.out.print(vertexList[i].label + " ");
                            vertexList[i].wasVisited = true;
                        }
                    }
                    //opsi 2
//                    getAdjUnvisitedVertex(col);
                }
            }
            resetFlags();
            System.out.println("");
        }
    }

    public void dfs(int label) {
        Stack theStack = new Stack();

        vertexList[label].wasVisited = true;
        displayVertex(label);
        theStack.push(label);
        while (!theStack.isEmpty()) {
            int v = getAdjUnvisitedVertex((int) theStack.peek());
            if (v == -1) {
                theStack.pop();
            } else {
                vertexList[v].wasVisited = true;
                displayVertex(v);
                theStack.push(v);
            }
        }
        System.out.println("");
        resetFlags();
    }

    public int getAdjUnvisitedVertex(int v) {
        for (int i = 0; i < nVerts; i++) {
            if (adjMat[v][i] == 1
                    && vertexList[i].wasVisited
                    == false) {
                return i;
            }
        }
        return -1;
    }

    private void resetFlags() {
        for (int i = 0; i < nVerts; i++) {
            vertexList[i].wasVisited = false;
        }
    }

    public void displayVertex(int v) {
        System.out.print(vertexList[v].label + " ");
    }

    public void topo() {
        int org_nVerts = nVerts;
        while (nVerts > 0) {
            int currentVertex = noSuccessors();
            if (currentVertex == -1) {
                System.out.println("Error : Graph has cycle");
                return;
            }
            sortedArray[nVerts-1] = vertexList[currentVertex].label;
            deleteVertex(currentVertex);
        }
        System.out.println("Topological sorted order :");
        for (int i = 0; i < org_nVerts; i++) {
            System.out.print(sortedArray[i] + " ");
        }
        System.out.println("");
    }

    private int noSuccessors() {
        boolean isEdge;
        for (int row = 0; row < nVerts; row++) {
            isEdge = false;
            for (int col = 0; col < nVerts; col++) {
                if (adjMat[row][col] > 0) {
                    isEdge = true;
                    break;
                }
            }
            if (!isEdge) {
                return row;
            }
        }
        return -1;
    }

    private void deleteVertex(int delVert) {
        if (delVert != nVerts - 1) {
            for (int j = delVert; j < nVerts - 1; j++) {
                vertexList[j] = vertexList[j + 1];
            }
            for (int row = delVert; row < nVerts - 1; row++) {
                moveRowUp(row, nVerts);
            }
            for (int col = delVert; col < nVerts; col++) {
                moveColLeft(col, nVerts - 1);
            }
        }
        nVerts--;
    }

    private void moveRowUp(int row, int length) {
        for (int col = 0; col < length; col++) {
            adjMat[row][col] = adjMat[row + 1][col];
        }
    }

    private void moveColLeft(int col, int length) {
        for (int row = 0; row < length; row++) {
            adjMat[row][col] = adjMat[row][col + 1];
        }
    }
}//end class Graph

public class GraphApp {

    public static void main(String[] args) {
        Graph theGraph = new Graph();
        theGraph.addVertex('A'); // 0
        theGraph.addVertex('B'); // 1
        theGraph.addVertex('C'); // 2
        theGraph.addVertex('D'); // 3
        theGraph.addVertex('E'); // 4
        theGraph.addEdge(0, 1); // AC
        theGraph.addEdge(2, 0); // BA
        theGraph.addEdge(2, 4); // AD
        theGraph.addEdge(4, 1);
        theGraph.addEdge(4, 3);
        theGraph.display();
        System.out.println("Connectivity Table :");
        for (int i = 0; i < 5; i++) {
            theGraph.dfs(i);
        }

        Graph graph = new Graph();
        graph.addVertex('A');
        graph.addVertex('B');
        graph.addVertex('C');
        graph.addVertex('D');
        graph.addVertex('E');
        graph.addVertex('F');
        graph.addVertex('G');
        graph.addVertex('H');

        graph.addEdge(3, 0);
        graph.addEdge(4, 0);
        graph.addEdge(4, 1);
        graph.addEdge(6, 3);
        graph.addEdge(6, 4);
        graph.addEdge(7, 6);
        graph.addEdge(5, 2);
        graph.addEdge(7, 5);

        graph.display();
        graph.topo();
    }
}
